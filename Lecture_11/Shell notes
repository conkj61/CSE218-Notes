Shell Sort notes:    created by Donald Shell

Shell sort is a modified version of insertion sort.
Recall insertion sort, uses comparisons and copies to "move" objects around. It actually just stores
		prints copies
	Given:
		6-->5   4   3   2   1
		 \  | 
		  \ |
		   \|
		    5   compare 6 to 5, copy the 5, rewrite 2nd position to 6, then copy 5 to the first position
		Worst case scenario of bigO is O(n^2).
		
To move 1, we need n copies, and n comparisons. So instead we want to move 1 to the front right away.
BigO will be somewhere between O(n^2) ~ O(n).
		n:			 10 |  100  |   1000   | 10,000
		n^2:		100 |10,000 |1,000,000 | 100,000,000
		n(logn)^2:   10 |  400  |   9000   | 160,000
		n(logn):     10 |  200  |   3000   |  40,000
	
	Average range for shell sort:
		n^(3/2):     32 | 1,000 |  32,000  | 1,000,000
		n^(5/4):     18 |   316 |   5600   | 100,000
		n^(7/6):     14 |   215 |   3200   |  46,000
	
	BigO for shell sort is up to, O(n(logn)^2)
	
***Shell sort is only good for a few thousand items, otherwise it begins to fall apart.***
Given n = 10 elements:
	7   10   1   9   2   5   8   6   4   3
	we will take the elements in index 0, 4, and 8.
	(7, 2, 4) sort those three, and then place them back in. **h = 1**
	
	2   10   1   9   4   5   8   6   7   3
	Then we will move one index over and do the same thing, keeping our jump/gap the same.
	index 1, 5, 9.:
	(10, 5, 3) again sort those three and place them back.  **h = 2**
	
	2   3   1   9   4   5   8   6   7   10
	Repeat again, moving initial index over one.
	index 2, 6   (only two indecies because our 3rd would be out of bounds)
	(1, 8) stays the same
	2   3   1   9   4   5   8   6   7   10
	Then repeat until we hit a number that has alread been sorted
	index 3, 7
	(9, 6) becomes (6, 9) and we move no further since index 4 was already sorted.
	
	2   3   1   6   4   5   8   9   7   10
	Now we will use insertion sort, and it will only require 1-3 copies/comparisons per element.
	This method is much more efficient and doesn't need to look through all of the objects.
	
	**The formula for the size of the gap/jump is known as Knuth's Formula**
	# of elements = 3*h + 1
		h	|	3 * h + 1	|  (h - 1)/3 <--- # of gaps to apply
		
		1			4				0
		4		   13				1
	   13		   40				4
	   40		  121			   13
	  121		  364			   40
	  364		 1094			  121
	 1094		 3280			  380
	 
	 Begins to fall apart beyond this point**